openapi: 3.0.2
info:
  title: 'OpenAPI Course'
  description: Specification for OpenAPI Course
  version: 1.0.0
  termsOfService: 'http://example.com/terms/'
  contact:
    name: Marcel Seuga
    email: sevgama44@gmail.com
  license:
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://dev.example.com'
    description: Development Server
  - url: 'https://qa.example.com'
    description: Question and Answer
  - url: 'https://prod.example.com'
    description: Production Server
paths:
  /v1/customers:
    get:
      summary: List Customers
      description: Get a list of customers in the system.
      tags:
        - Customers
      operationId: listCustomersV1
      parameters:
        - $ref: "#/components/parameters/pageNumberParameter"
        - $ref: "#/components/parameters/pageSizeParameter"
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerList"
    post:
      summary: New Customer
      description: Create a new Customer
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
       '201':
         description: Customer Created
         headers:
           Location:
             description: Location of the created Customer
             schema:
               type: string
               format: uri
               example: http://example.com/v1/customers/{assignedIdvalue}
  /v1/customers/{customerId}:
    get:
      summary: Get Customer by ID
      description: Get a **Customer** by its Id value.
      tags:
        - Customers
      operationId: getCustomerByIdV1
      parameters:
        - name: customerId
          in: path
          description: Customer Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Found Customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
  /v1/beers:
    get:
      summary: List Beers
      description: Get a list of Beers in the system.
      tags:
        - Beers
      operationId: listBeersV1
      parameters:
        - $ref: "#/components/parameters/pageNumberParameter"
        - $ref: "#/components/parameters/pageSizeParameter"

      responses:
        '200':
          description: List of Beers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeerPagedList"
        '404':
          description: No Beers Found
  /v1/beer/{BeerId}:
    get:
      summary: Get Beers by ID
      description: Get a single beer by its Id value.
      tags:
        - Beers
      operationId: getBeerByIdV1
      parameters:
        - name: BeerId
          in: path
          description: Beer Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200' :
            description: Beer Found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Beer"


components:
  schemas:
    Address:
      type: object
      properties:
        line1:
          type: string
          example: 248 pineapple
        city:
          type: string
          example: Greer
        stateCode:
          type: string
          minLength: 2
          maxLength: 2
          description: 2 Letter State Code
          # enum: [AL, AK, AZ, AR, CA]
          enum:
            -AL
            -AK
            -AZ
            -AR
            -CA
        zipCode:
          type: string
          example: 30005
    Customer:
      type: object
      description: customer object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
          minLength: 2
          maxLength: 100
          example: Marcel
        lastName:
          type: string
          minLength: 2
          maxLength: 100
          example: Seuga
        address:
          $ref: "#/components/schemas/Address"
    CustomerList:
      type: array
      minItems: 1
      maxItems: 100
      description: List of Customers
      items:
        $ref: "#/components/schemas/Customer"
    Brewery:
      type: object
      properties:
        name:
          type: string
        location:
          type: string
    Beer:
      type: object
      description: Beer object
      properties:
        name:
          type: string
        style:
          type: string
          enum: [ ALE, PALE_ALE, IPA, WHEAT, LAGER ]
        upc:
          type: string
        price:
          type: number
          format: float
        quantity:
          type: integer
          format: int32
        brewery:
          $ref: "#/components/schemas/Brewery"
    BeerList:
      type: array
      description: List of beer object
      items:
        $ref: "#/components/schemas/Beer"
    BeerPagedList:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content:
          $ref: "#/components/schemas/PagedResponse"
    CustomerPagedList:
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content:
          $ref: "#/components/schemas/PagedResponse"
    PagedResponse:
      type: object
      properties:
        pageable:
          type: object
          properties:
            sort:
              type: object
              properties:
                sorted:
                  type: boolean
                unsorted:
                  type: boolean
            offset:
              type: integer
              format: int32
            pageNumber:
              type: integer
              format: int32
            pageSize:
              type: integer
              format: int32
            paged:
              type: boolean
            unpaged:
              type: boolean
        totalPages:
          type: integer
          format: int32
    PageSize:
      type: integer
      format: int32
      default: 25
    PageNumber:
      type: integer
      format: int32
      default: 1
  parameters:
    pageNumberParameter:
      name: pageNumber
      in: query
      description: Page Number
      required: false
      schema:
        $ref: "#/components/schemas/PageNumber"
    pageSizeParameter:
      name: pageSize
      in: query
      description: Page Size
      required: false
      schema:
        $ref: "#/components/schemas/PageSize"